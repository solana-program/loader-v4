/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOADER_V4_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TRUNCATE_DISCRIMINATOR = 1;

export function getTruncateDiscriminatorBytes() {
  return getU32Encoder().encode(TRUNCATE_DISCRIMINATOR);
}

export type TruncateInstruction<
  TProgram extends string = typeof LOADER_V4_PROGRAM_ADDRESS,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountDestination extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgram extends string
        ? WritableSignerAccount<TAccountProgram> &
            IAccountSignerMeta<TAccountProgram>
        : TAccountProgram,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      ...TRemainingAccounts,
    ]
  >;

export type TruncateInstructionData = {
  discriminator: number;
  newSize: number;
};

export type TruncateInstructionDataArgs = { newSize: number };

export function getTruncateInstructionDataEncoder(): Encoder<TruncateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU32Encoder()],
      ['newSize', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TRUNCATE_DISCRIMINATOR })
  );
}

export function getTruncateInstructionDataDecoder(): Decoder<TruncateInstructionData> {
  return getStructDecoder([
    ['discriminator', getU32Decoder()],
    ['newSize', getU32Decoder()],
  ]);
}

export function getTruncateInstructionDataCodec(): Codec<
  TruncateInstructionDataArgs,
  TruncateInstructionData
> {
  return combineCodec(
    getTruncateInstructionDataEncoder(),
    getTruncateInstructionDataDecoder()
  );
}

export type TruncateInput<
  TAccountProgram extends string = string,
  TAccountAuthority extends string = string,
  TAccountDestination extends string = string,
> = {
  /** Program account to change the size of. */
  program: TransactionSigner<TAccountProgram>;
  /** Program authority. */
  authority: TransactionSigner<TAccountAuthority>;
  /** Destination account for reclaimed lamports (optional). */
  destination?: Address<TAccountDestination>;
  newSize: TruncateInstructionDataArgs['newSize'];
};

export function getTruncateInstruction<
  TAccountProgram extends string,
  TAccountAuthority extends string,
  TAccountDestination extends string,
>(
  input: TruncateInput<TAccountProgram, TAccountAuthority, TAccountDestination>
): TruncateInstruction<
  typeof LOADER_V4_PROGRAM_ADDRESS,
  TAccountProgram,
  TAccountAuthority,
  TAccountDestination
> {
  // Program address.
  const programAddress = LOADER_V4_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    program: { value: input.program ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.destination),
    ],
    programAddress,
    data: getTruncateInstructionDataEncoder().encode(
      args as TruncateInstructionDataArgs
    ),
  } as TruncateInstruction<
    typeof LOADER_V4_PROGRAM_ADDRESS,
    TAccountProgram,
    TAccountAuthority,
    TAccountDestination
  >;

  return instruction;
}

export type ParsedTruncateInstruction<
  TProgram extends string = typeof LOADER_V4_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Program account to change the size of. */
    program: TAccountMetas[0];
    /** Program authority. */
    authority: TAccountMetas[1];
    /** Destination account for reclaimed lamports (optional). */
    destination?: TAccountMetas[2] | undefined;
  };
  data: TruncateInstructionData;
};

export function parseTruncateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTruncateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LOADER_V4_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      program: getNextAccount(),
      authority: getNextAccount(),
      destination: getNextOptionalAccount(),
    },
    data: getTruncateInstructionDataDecoder().decode(instruction.data),
  };
}
