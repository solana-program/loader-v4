/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { LOADER_V4_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WRITE_DISCRIMINATOR = 0;

export function getWriteDiscriminatorBytes() {
  return getU32Encoder().encode(WRITE_DISCRIMINATOR);
}

export type WriteInstruction<
  TProgram extends string = typeof LOADER_V4_PROGRAM_ADDRESS,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgram extends string
        ? WritableAccount<TAccountProgram>
        : TAccountProgram,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type WriteInstructionData = {
  discriminator: number;
  offset: number;
  bytes: ReadonlyUint8Array;
};

export type WriteInstructionDataArgs = {
  offset: number;
  bytes: ReadonlyUint8Array;
};

export function getWriteInstructionDataEncoder(): Encoder<WriteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU32Encoder()],
      ['offset', getU32Encoder()],
      ['bytes', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: WRITE_DISCRIMINATOR })
  );
}

export function getWriteInstructionDataDecoder(): Decoder<WriteInstructionData> {
  return getStructDecoder([
    ['discriminator', getU32Decoder()],
    ['offset', getU32Decoder()],
    ['bytes', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getWriteInstructionDataCodec(): Codec<
  WriteInstructionDataArgs,
  WriteInstructionData
> {
  return combineCodec(
    getWriteInstructionDataEncoder(),
    getWriteInstructionDataDecoder()
  );
}

export type WriteInput<
  TAccountProgram extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** Program account to write to. */
  program: Address<TAccountProgram>;
  /** Program authority. */
  authority: TransactionSigner<TAccountAuthority>;
  offset: WriteInstructionDataArgs['offset'];
  bytes: WriteInstructionDataArgs['bytes'];
};

export function getWriteInstruction<
  TAccountProgram extends string,
  TAccountAuthority extends string,
>(
  input: WriteInput<TAccountProgram, TAccountAuthority>
): WriteInstruction<
  typeof LOADER_V4_PROGRAM_ADDRESS,
  TAccountProgram,
  TAccountAuthority
> {
  // Program address.
  const programAddress = LOADER_V4_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    program: { value: input.program ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getWriteInstructionDataEncoder().encode(
      args as WriteInstructionDataArgs
    ),
  } as WriteInstruction<
    typeof LOADER_V4_PROGRAM_ADDRESS,
    TAccountProgram,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedWriteInstruction<
  TProgram extends string = typeof LOADER_V4_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Program account to write to. */
    program: TAccountMetas[0];
    /** Program authority. */
    authority: TAccountMetas[1];
  };
  data: WriteInstructionData;
};

export function parseWriteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWriteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      program: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getWriteInstructionDataDecoder().decode(instruction.data),
  };
}
