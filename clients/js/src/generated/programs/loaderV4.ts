/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  getU32Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedDeployInstruction,
  type ParsedFinalizeInstruction,
  type ParsedRetractInstruction,
  type ParsedTransferAuthorityInstruction,
  type ParsedTruncateInstruction,
  type ParsedWriteInstruction,
} from '../instructions';

export const LOADER_V4_PROGRAM_ADDRESS =
  'CoreBPFLoaderV41111111111111111111111111111' as Address<'CoreBPFLoaderV41111111111111111111111111111'>;

export enum LoaderV4Instruction {
  Write,
  Truncate,
  Deploy,
  Retract,
  TransferAuthority,
  Finalize,
}

export function identifyLoaderV4Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LoaderV4Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU32Encoder().encode(0), 0)) {
    return LoaderV4Instruction.Write;
  }
  if (containsBytes(data, getU32Encoder().encode(1), 0)) {
    return LoaderV4Instruction.Truncate;
  }
  if (containsBytes(data, getU32Encoder().encode(2), 0)) {
    return LoaderV4Instruction.Deploy;
  }
  if (containsBytes(data, getU32Encoder().encode(3), 0)) {
    return LoaderV4Instruction.Retract;
  }
  if (containsBytes(data, getU32Encoder().encode(4), 0)) {
    return LoaderV4Instruction.TransferAuthority;
  }
  if (containsBytes(data, getU32Encoder().encode(5), 0)) {
    return LoaderV4Instruction.Finalize;
  }
  throw new Error(
    'The provided instruction could not be identified as a loaderV4 instruction.'
  );
}

export type ParsedLoaderV4Instruction<
  TProgram extends string = 'CoreBPFLoaderV41111111111111111111111111111',
> =
  | ({
      instructionType: LoaderV4Instruction.Write;
    } & ParsedWriteInstruction<TProgram>)
  | ({
      instructionType: LoaderV4Instruction.Truncate;
    } & ParsedTruncateInstruction<TProgram>)
  | ({
      instructionType: LoaderV4Instruction.Deploy;
    } & ParsedDeployInstruction<TProgram>)
  | ({
      instructionType: LoaderV4Instruction.Retract;
    } & ParsedRetractInstruction<TProgram>)
  | ({
      instructionType: LoaderV4Instruction.TransferAuthority;
    } & ParsedTransferAuthorityInstruction<TProgram>)
  | ({
      instructionType: LoaderV4Instruction.Finalize;
    } & ParsedFinalizeInstruction<TProgram>);
