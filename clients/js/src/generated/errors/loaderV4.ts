/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { LOADER_V4_PROGRAM_ADDRESS } from '../programs';

/** Placeholder: This is a placeholder error */
export const LOADER_V4_ERROR__PLACEHOLDER = 0x0; // 0

export type LoaderV4Error = typeof LOADER_V4_ERROR__PLACEHOLDER;

let loaderV4ErrorMessages: Record<LoaderV4Error, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  loaderV4ErrorMessages = {
    [LOADER_V4_ERROR__PLACEHOLDER]: `This is a placeholder error`,
  };
}

export function getLoaderV4ErrorMessage(code: LoaderV4Error): string {
  if (process.env.NODE_ENV !== 'production') {
    return (loaderV4ErrorMessages as Record<LoaderV4Error, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isLoaderV4Error<TProgramErrorCode extends LoaderV4Error>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LOADER_V4_PROGRAM_ADDRESS,
    code
  );
}
